"""
Django settings for productlegislationnavigator project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url
from _socket import gethostbyname, gethostname

from sso.login import PwCSSO
from sso.msal_helper import MSAL

# Environment name, derived from loaded settings module, defaults to `dev`.
ENV = os.environ.get("DJANGO_SETTINGS_MODULE", "dev").split(".")[-1]

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "[::1]",
    gethostname(),
    gethostbyname(gethostname()),
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # django apps
    "core",
    "auditing",
    "navigator",
    "profiles",
    "datareader",
    "client",
    "sso",
    # third party apps
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.oauth.OAuthMiddleware",
    "core.middleware.user_whitelist.UserWhitelistMiddleware",
    "core.middleware.force_admin.ForceAdminMiddleware",
    "auditing.middleware.currentuser.CurrentUserMiddleware",
    "core.middleware.options.DisableOptionsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True

APP_ADMINS = [
    "challik002",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.static_vars",
                "core.context_processors.urls",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600,
        engine="django.db.backends.mysql",
    ),
}

DATABASES["default"]["OPTIONS"] = {
    "charset": "utf8mb4",
    "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
    "ssl": {
        "ca": os.path.join(BASE_DIR, "..", "conf", "DigiCertGlobalRootCA.crt.pem"),
    },
}

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "user": "50/minute",  # 50 requests per minute per user
    },
    "EXCEPTION_HANDLER": "core.exceptions.custom_exception_handler",
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ),
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "profiles.Profile"

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_URL = "/_/static/"
STATIC_ROOT = BASE_DIR / ".." / "_/static-collected"

# Sentry
SENTRY_DSN = os.environ.get("SENTRY_DSN", "")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.mailgun.org"
EMAIL_PORT = 2525
EMAIL_HOST_USER = "productlegislationnavigator@devcfs.com"
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = True
EMAIL_FROM = "no-reply@devcfs.com"
EMAIL_FROM_NAME = "Product Legislation Navigator"
EMAIL_TO_TEST_ADDRESS = os.environ.get("EMAIL_TO_TEST_ADDRESS", "")

# DEFAULT_FILE_STORAGE = "storages.backends.azure_storage.AzureStorage"

AZURE_CONTAINER = "data"
AZURE_STORAGE_CONTAINER = "data"
AZURE_ACCOUNT_NAME = os.environ.get("AZURE_ACCOUNT_NAME")
AZURE_CONNECTION_STRING = os.environ.get("AZURE_CONNECTION_STRING")

AUDITTRAIL_MODELS = [
    "navigator.Legislation",
    "navigator.Legislation_topic",
    "navigator.Legislation_type",
    "navigator.Legislation_issuing_jurisdiction",
    "navigator.Legislation_geographical_scope",
    "navigator.Legislation_product_service",
    "navigator.Legislation_registration_requirements",
    "navigator.Legislation_reporting_requirements",
    "navigator.Legislation_regulatory_requirements",
    "navigator.Legislation_non_compliance_consequence",
    "navigator.Legislation_pwc_contact",
    "navigator.Legislation_job_role_list",
    "client.Client_team_members",
    "client.Client_legislation_list",
    "client.Client_client_members",
    "client.Client",
    "client.ClientLegislation",
]

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True

# Set the session cookie age to 15 minutes (900 seconds)
SESSION_COOKIE_AGE = 900

# Ensure that the session expires when the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Save the session to the database on every request (optional, ensures session expiry is respected)
SESSION_SAVE_EVERY_REQUEST = True

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

SECURE_BROWSER_XSS_FILTER = True

USER_WHITELIST_ONLY = True
USER_WHITELIST = [
    "anish.sewbaransingh@pwc.com",
    "anna.tuitjer@pwc.com",
    "ayhan.elatik@pwc.com",
    "bart.baeschnitt@pwc.com",
    "canberk.x.hallik@pwc.com",
    "cate.mackenzie@pwc.com",
    "david.muijtjens@pwc.com",
    "gideon.nimoh@pwc.com",
    "kinga.kelemen@pwc.com",
    "marieke.de.wal@pwc.com",
    "miriam.k.koll@pwc.com",
    "nienke.tjalma@pwc.com",
    "niki.volonasi@pwc.com",
    "nino.snijders@pwc.com",
    "noor.sanders@pwc.com",
    "priyanka.d.dochibhotla@pwc.com",
    "selly.ng@pwc.com",
    "sofia.de.morais@pwc.com",
    "stijn.van.doorn@pwc.com",
    "waithera.kinyeki@pwc.com",
    "wietske.hurrelbrinck@pwc.com",
    "wouter.van.der.aart@pwc.com",
    "matthew.venter@pwc.com",
    "anna.bulzomi@pwc.com",
    # "shoichi.hikami@asics.com",
    # "valentina.david@asics.com",
    # "romy.miltenburg@asics.com",
    # "carmen.ortiz@asics.com",
    # "patricia.roser@asics.com",
    # "ilse.vandertol@asics.com",
    # "antigoni.gkarla@asics.com",
    # "laurens.norde@asics.com",
    # "aleksandar.krstic@asics.com",
    # "frederike.janssen@asics.com",
    # "bo.duijvestijn@asics.com",
    # "ollie.pollard@asics.com",
    # "aya.yoshimura@asics.com",
    # "seiko.inoue@asics.com",
    "netson.dsouza@asics.com",
    "srtc7.pentester@pwc.com",
    "srtc2.pentester@pwc.com",
    "srtc12.pentester@pwc.com",
    "srtc20.pentester@pwc.com",
    "cyberonetest001@gmail.com",
    "cybertwotest002@gmail.com",
    "cyberthreetest003@gmail.com",
]

FORCE_ADMIN = [
    "ayhan.elatik@pwc.com",
    "canberk.x.hallik@pwc.com",
    "gideon.nimoh@pwc.com",
    "kinga.kelemen@pwc.com",
    "nienke.tjalma@pwc.com",
    "niki.volonasi@pwc.com",
    "priyanka.d.dochibhotla@pwc.com",
    "sofia.de.morais@pwc.com",
    "wouter.van.der.aart@pwc.com",
    "matthew.venter@pwc.com",
]

URL_FRONTEND = "/"
URL_BACKEND = "/"

# API timeout
DEFAULT_REQUEST_TIMEOUT = 10

LOGIN_SYSTEM = {
    "PwC": {"provider": PwCSSO, "settings": {}},
    "Asics": {
        "provider": MSAL,
        "settings": {
            "SCOPES": ["user.read"],
            "AAD_TENANT_ID": os.environ.get("ASICS_AAD_TENANT_ID"),
            "AAD_CLIENT_ID": os.environ.get("ASICS_AAD_CLIENT_ID"),
            "AAD_CLIENT_SECRET": os.environ.get("ASICS_AAD_CLIENT_SECRET"),
        },
    },
}
