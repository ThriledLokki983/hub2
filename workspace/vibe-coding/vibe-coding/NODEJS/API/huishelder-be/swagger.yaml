openapi: 3.0.0
info:
  title: Huishelder API
  version: 1.0.0
  description: The API documentation for the Huishelder backend service

tags:
- name: users
  description: User management endpoints
- name: auth
  description: Authentication endpoints
- name: health
  description: System health endpoints
- name: Journey
  description: Home buying/selling journey endpoints
- name: financial
  description: Financial dashboard endpoints

paths:
  # [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'Users retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    # [POST] users
    post:
      tags:
      - users
      summary: Add User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        201:
          description: 'User created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: 'Conflict - Email already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # [GET] users/me
  /users/me:
    get:
      tags:
      - users
      summary: Get current user profile
      description: Retrieve the profile of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'Current user data retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: 'Unauthorized - Authentication required'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'Authentication token missing'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: 'User retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    # [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        200:
          description: 'User updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: 'Conflict - Email already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    # [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: 'User deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Photo Endpoints
  /users/{id}/photo:
    post:
      tags:
      - users
      summary: Upload User Photo
      description: Upload a new photo for a user
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The image file to upload (jpg, jpeg, png, gif)
              required:
                - photo
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'Photo uploaded successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'Bad Request - Invalid file or missing file'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
      - users
      summary: Update User Photo
      description: Update an existing photo for a user
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The new image file to upload (jpg, jpeg, png, gif)
              required:
                - photo
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'Photo updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'Bad Request - Invalid file or missing file'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - users
      summary: Delete User Photo
      description: Remove a user's photo
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: string
          format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'Photo deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Authentication Endpoints
  /auth/signup:
    post:
      tags:
      - auth
      summary: Register a new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
      - auth
      summary: Login to the application
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        200:
          description: Login successful
          headers:
            Set-Cookie:
              description: Authentication cookie containing JWT
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Wrong credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
      - auth
      summary: Logout from the application
      description: Invalidate the authentication token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          headers:
            Set-Cookie:
              description: Clear authentication cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized - Invalid authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Authentication token missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/request-password-reset:
    post:
      tags:
      - auth
      summary: Request password reset
      description: Request a password reset link to be sent to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordResetDto'
      responses:
        200:
          description: Password reset link sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags:
      - auth
      summary: Reset password
      description: Reset user's password using a valid reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/dev/get-reset-token:
    get:
      tags:
      - auth
      summary: Get reset token for a user (DEV ONLY)
      description: Development endpoint to retrieve a password reset token for testing
      parameters:
      - in: query
        name: email
        schema:
          type: string
        required: true
        description: The email address of the user
      responses:
        200:
          description: Retrieved token
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  token:
                    type: string
        404:
          description: No token found for email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Health Endpoints
  /health:
    get:
      tags:
      - health
      summary: Get system health status
      description: Returns basic health information about the system
      responses:
        200:
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [healthy, unhealthy]
                      timestamp:
                        type: string
                        format: date-time
                      redis:
                        type: object
                      system:
                        type: object
                  statusCode:
                    type: integer
                    example: 200
        503:
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health/redis:
    get:
      tags:
      - health
      summary: Get Redis health status
      description: Returns detailed health information about Redis
      security:
        - bearerAuth: []
      responses:
        200:
          description: Redis is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      healthy:
                        type: boolean
                      status:
                        type: string
                      latency:
                        type: number
                        description: Response time in milliseconds
                      uptime:
                        type: number
                        description: Redis server uptime in seconds
                  statusCode:
                    type: integer
                    example: 200
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        503:
          description: Redis is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health/redis/metrics:
    get:
      tags:
      - health
      summary: Get Redis metrics
      description: Returns detailed metrics about Redis usage and performance
      security:
        - bearerAuth: []
      responses:
        200:
          description: Redis metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      uptime:
                        type: number
                        description: Redis server uptime in seconds
                      connectedClients:
                        type: number
                      usedMemory:
                        type: number
                        description: Used memory in bytes
                      hitRate:
                        type: number
                        description: Cache hit rate percentage
                  statusCode:
                    type: integer
                    example: 200
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Standard API Response format
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          example: true
        message:
          type: string
          description: A human-readable message describing the result
          example: "User retrieved successfully"
        data:
          type: object
          description: The response data payload
        meta:
          type: object
          description: Metadata about the response (pagination, counts, etc.)
          properties:
            count:
              type: integer
              description: Number of items in the data array
              example: 10
            total:
              type: integer
              description: Total number of items available
              example: 120
            page:
              type: integer
              description: Current page number
              example: 1
            limit:
              type: integer
              description: Number of items per page
              example: 10
        statusCode:
          type: integer
          description: HTTP status code
          example: 200

    # Standard Error Response format
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Always false for errors
          example: false
        message:
          type: string
          description: A human-readable error message
          example: "User not found"
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Detailed error message
              code:
                type: string
                description: Error code
              field:
                type: string
                description: Field that caused the error
        statusCode:
          type: integer
          description: HTTP status code
          example: 404
      required:
        - success
        - message
        - statusCode

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
          description: User password (hashed)
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - password

    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
          description: User password
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
      required:
        - email
        - password

    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
          description: User password
      required:
        - email
        - password

    RequestPasswordResetDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address to send reset link
      required:
        - email

    ResetPasswordDto:
      type: object
      properties:
        token:
          type: string
          description: Password reset token received by email
        password:
          type: string
          format: password
          description: New password (min 9 chars, max 32 chars)
      required:
        - token
        - password

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

servers:
  - url: /api
    description: Development server
