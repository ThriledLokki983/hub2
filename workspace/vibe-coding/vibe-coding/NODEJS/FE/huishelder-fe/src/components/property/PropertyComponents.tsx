// import styled from '@emotion/styled';
// import { PropertyComponentsProps } from './PropertyComponents.interface';

// `;  }    }      color: ${colors.deepOliveGreen};    &:hover:not(.active) {    }      color: white;      background-color: ${colors.deepOliveGreen};    &.active {    transition: ${transitions.default};    cursor: pointer;    color: ${colors.slateGray};    border-radius: ${borderRadius.md};    border: none;    background-color: transparent;    padding: ${spacing[2]} ${spacing[3]};  button {  border-radius: ${borderRadius.lg};  background-color: ${colors.boneWhite};  padding: ${spacing[1]};  gap: ${spacing[1]};  display: flex;export const ViewToggle = styled.div``;  }    color: ${props => props.active ? 'white' : colors.deepOliveGreen};    border-color: ${colors.deepOliveGreen};  &:hover {  transition: ${transitions.default};  cursor: pointer;  font-family: ${typography.fontFamily};  font-size: ${typography.fontSizes.sm};  border-radius: ${borderRadius.full};  border: 1px solid ${props => props.active ? colors.deepOliveGreen : colors.mutedTaupe};  color: ${props => props.active ? 'white' : colors.charcoalInk};  background-color: ${props => props.active ? colors.deepOliveGreen : colors.boneWhite};  padding: ${spacing[2]} ${spacing[4]};export const FilterChip = styled.button<{ active?: boolean }>``;  flex-wrap: wrap;  gap: ${spacing[3]};  display: flex;export const SearchFilters = styled.div``;  }    align-items: stretch;    flex-direction: column;  @media (max-width: 768px) {  flex-wrap: wrap;  margin-bottom: ${spacing[6]};  border-radius: ${borderRadius.lg};  background-color: ${colors.warmFog};  padding: ${spacing[4]};  gap: ${spacing[4]};  align-items: center;  display: flex;export const FilterBar = styled.div``;  }    margin-bottom: ${spacing[6]};    color: ${colors.charcoalInk};    font-weight: ${typography.fontWeights.light};    font-size: ${typography.fontSizes['2xl']};  h3 {  margin: ${spacing[8]} 0;export const SimilarProperties = styled.div``;  }    }      margin: 0;      color: ${colors.slateGray};      font-size: ${typography.fontSizes.sm};    p {    }      margin: 0 0 ${spacing[1]};      color: ${colors.charcoalInk};      font-weight: ${typography.fontWeights.medium};      font-size: ${typography.fontSizes.lg};    h4 {  .info {  }    }      object-fit: cover;      height: 100%;      width: 100%;    img {    overflow: hidden;    border-radius: 50%;    height: 64px;    width: 64px;  .avatar {  margin-bottom: ${spacing[6]};  border-radius: ${borderRadius.lg};  background-color: ${colors.warmFog};  padding: ${spacing[4]};  gap: ${spacing[4]};  align-items: center;  display: flex;export const AgentCard = styled.div``;  margin-bottom: ${spacing[6]};  border-radius: ${borderRadius.lg};  background-color: ${colors.warmFog};  height: 300px;export const PropertyMap = styled.div``;  }    margin-bottom: ${spacing[4]};    color: ${colors.charcoalInk};    font-weight: ${typography.fontWeights.light};    font-size: ${typography.fontSizes['2xl']};  h3 {  margin-bottom: ${spacing[8]};export const Section = styled.section``;  }    grid-template-columns: 1fr;  @media (max-width: 768px) {  margin: ${spacing[8]} 0;  gap: ${spacing[8]};  grid-template-columns: 2fr 1fr;  display: grid;export const PropertyDetails = styled.div``;  }    }      margin: 0;      color: ${colors.charcoalInk};      font-weight: ${typography.fontWeights.semibold};      font-size: ${typography.fontSizes.lg};    p {    }      margin: 0 0 ${spacing[1]};      color: ${colors.slateGray};      font-weight: ${typography.fontWeights.medium};      font-size: ${typography.fontSizes.sm};    h4 {  .details {  }    color: ${colors.deepOliveGreen};    height: 32px;    width: 32px;  .icon {  }    box-shadow: ${shadows.sm};    transform: translateY(-2px);  &:hover {  transition: ${transitions.default};  border-radius: ${borderRadius.lg};  background-color: ${colors.warmFog};  padding: ${spacing[4]};  gap: ${spacing[3]};  align-items: center;  display: flex;export const FeatureCard = styled.div``;  margin: ${spacing[6]} 0;  gap: ${spacing[4]};  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));  display: grid;export const PropertyFeatures = styled.div``;  }    color: white;    );      rgba(42, 42, 42, 0.8)      transparent,      to bottom,    background: linear-gradient(    padding: ${spacing[6]};    right: 0;    left: 0;    bottom: 0;    position: absolute;  .overlay {  }    object-fit: cover;    height: 100%;    width: 100%;  img {  margin-bottom: ${spacing[8]};  overflow: hidden;  border-radius: ${borderRadius.xl};  background-color: ${colors.warmFog};  height: 400px;  position: relative;export const PropertyHero = styled.div``;  margin: ${spacing[8]} 0;  gap: ${spacing[6]};  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));  display: grid;export const PropertyGrid = styled.div`import { colors, shadows, spacing, transitions, typography, borderRadius } from '../../styles/theme/theme';
